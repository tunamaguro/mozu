//! Code generated by sqlc. SHOULD NOT EDIT.
//! sqlc version: v1.28.0
//! sqlc-rust-postgres version: v0.1.3
pub const CREATE_ACCOUNT: &str = r#"-- name: CreateAccount :exec
INSERT INTO accounts (id, name)
VALUES ($1, $2)"#;
pub async fn create_account(
    client: &impl deadpool_postgres::GenericClient,
    accounts_id: &uuid::Uuid,
    accounts_name: &str,
) -> Result<u64, deadpool_postgres::tokio_postgres::Error> {
    client
        .execute(CREATE_ACCOUNT, &[&accounts_id, &accounts_name])
        .await
}
pub const FIND_ACCOUNT_BY_ID: &str = r#"-- name: FindAccountById :one
SELECT id, name
FROM accounts
WHERE id = $1"#;
#[derive(PartialEq, Debug, Clone)]
pub struct FindAccountByIdRow {
    pub accounts_id: uuid::Uuid,
    pub accounts_name: String,
}
pub async fn find_account_by_id(
    client: &impl deadpool_postgres::GenericClient,
    accounts_id: &uuid::Uuid,
) -> Result<Option<FindAccountByIdRow>, deadpool_postgres::tokio_postgres::Error> {
    let row = client
        .query_opt(FIND_ACCOUNT_BY_ID, &[&accounts_id])
        .await?;
    let v = match row {
        Some(v) => FindAccountByIdRow {
            accounts_id: v.try_get(0)?,
            accounts_name: v.try_get(1)?,
        },
        None => return Ok(None),
    };
    Ok(Some(v))
}
pub const FIND_ACCOUNT_BY_NAME: &str = r#"-- name: FindAccountByName :one
SELECT id, name
FROM accounts
WHERE name = $1"#;
#[derive(PartialEq, Debug, Clone)]
pub struct FindAccountByNameRow {
    pub accounts_id: uuid::Uuid,
    pub accounts_name: String,
}
pub async fn find_account_by_name(
    client: &impl deadpool_postgres::GenericClient,
    accounts_name: &str,
) -> Result<Option<FindAccountByNameRow>, deadpool_postgres::tokio_postgres::Error> {
    let row = client
        .query_opt(FIND_ACCOUNT_BY_NAME, &[&accounts_name])
        .await?;
    let v = match row {
        Some(v) => FindAccountByNameRow {
            accounts_id: v.try_get(0)?,
            accounts_name: v.try_get(1)?,
        },
        None => return Ok(None),
    };
    Ok(Some(v))
}
